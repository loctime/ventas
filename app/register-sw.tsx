"use client"

import { useEffect, useRef } from "react"
import { toast } from "sonner"

export function RegisterServiceWorker() {
  const updateToastId = useRef<string | number | null>(null)

  useEffect(() => {
    if ("serviceWorker" in navigator) {
      let registration: ServiceWorkerRegistration | null = null

      navigator.serviceWorker
        .register("/sw.js")
        .then((reg) => {
          registration = reg
          console.log("‚úÖ Service Worker registered successfully")

          // Verificar actualizaciones cada 30 minutos
          const checkInterval = setInterval(() => {
            console.log("üîÑ Checking for SW updates...")
            reg.update()
          }, 30 * 60 * 1000)

          // Verificar actualizaci√≥n al inicio despu√©s de 10 segundos
          setTimeout(() => {
            reg.update()
          }, 10000)

          // Detectar cuando hay una nueva versi√≥n instal√°ndose
          reg.addEventListener("updatefound", () => {
            const newWorker = reg.installing
            console.log("üÜï New Service Worker found!")

            if (newWorker) {
              newWorker.addEventListener("statechange", () => {
                console.log("SW State:", newWorker.state)

                // Si el nuevo SW est√° instalado y hay uno activo (actualizaci√≥n)
                if (
                  newWorker.state === "installed" &&
                  navigator.serviceWorker.controller
                ) {
                  console.log("üîî Update available - notifying user")

                  // Mostrar notificaci√≥n de actualizaci√≥n
                  updateToastId.current = toast("¬°Nueva versi√≥n disponible! üéâ", {
                    description:
                      "Hay una actualizaci√≥n de la app. Recarga para ver los cambios.",
                    duration: Infinity,
                    action: {
                      label: "Actualizar Ahora",
                      onClick: () => {
                        // Enviar mensaje al SW para que tome control inmediatamente
                        newWorker.postMessage({ type: "SKIP_WAITING" })
                        // Recargar la p√°gina
                        window.location.reload()
                      },
                    },
                    cancel: {
                      label: "Despu√©s",
                      onClick: () => {
                        console.log("User dismissed update")
                      },
                    },
                  })
                }
              })
            }
          })

          // Detectar cuando el SW toma control
          let refreshing = false
          navigator.serviceWorker.addEventListener("controllerchange", () => {
            if (refreshing) return
            console.log("üîÑ Controller changed - reloading")
            refreshing = true
            window.location.reload()
          })

          return () => {
            clearInterval(checkInterval)
          }
        })
        .catch((error) => {
          console.error("‚ùå Service Worker registration failed:", error)
        })
    } else {
      console.warn("‚ö†Ô∏è Service Workers not supported")
    }
  }, [])

  return null
}
